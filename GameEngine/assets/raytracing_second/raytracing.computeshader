#version 430

layout (local_size_x = 32, local_size_y = 32) in;

//layout (rgba32f, binding = 0) uniform image2D img_output;
// layout (rgba32f, binding = 1) uniform image2D img_input;

layout(std430, binding = 5) buffer layoutName
{
    //float time;
    //float delta_time;
	float temp;
};

void main() {
  // gl_LocalInvocationID -> where we are in local size (32,32)
  // gl_WorkGroupID -> where we are in WorkGroup size (30,40,1)
  // gl_GlobalInvocationID -> where we are in image (gl_LocalInvocationID * gl_WorkGroupID)
   vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);
  // get index in global work group i.e x,y position
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
  
  float max_x = 5.0;
  float max_y = 5.0;
  //ivec2 dims = imageSize(img_output); // fetch image dimensions
  float x = 1;
  float y = 1;
  vec3 ray_o = vec3(x * max_x, y * max_y, 0.0);
  vec3 ray_d = vec3(0.0, 0.0, -1.0); // ortho
  vec3 sphere_c = vec3(0.0, 0.0, -10.0);
  float sphere_r = 1;
  //temp = sphere_r;
  temp = gl_GlobalInvocationID.x;
  
  vec3 omc = ray_o - sphere_c;
  float b = dot(ray_d, omc);
  float c = dot(omc, omc) - sphere_r * sphere_r;
  float bsqmc = b * b - c;
  // hit one or both sides
  if (bsqmc >= 0.0) {
   pixel = vec4(0.4, 0.4, 1.0, 1.0);
  }
  
  
  ivec2 p = ivec2(gl_GlobalInvocationID.xy);
  //pixel = imageLoad(img_input, p);
  //pixel -= vec4(1.0);
  //pixel = vec4(1,1,1,1);
  //imageStore(img_output, p, pixel);
}